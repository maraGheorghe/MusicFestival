{"ast":null,"code":"import { FESTIVAL_PERFORMANCES_BASE_URL } from './consts';\n\nfunction status(response) {\n  console.log('Response status: ' + response.status);\n\n  if (response.status >= 200 && response.status < 300) {\n    return Promise.resolve(response);\n  } else {\n    return Promise.reject(new Error(response.statusText));\n  }\n}\n\nfunction json(response) {\n  return response.json();\n}\n\nexport function GetAllPerformances() {\n  const headers = new Headers();\n  headers.append('Accept', 'application/json');\n  const myInit = {\n    method: 'GET',\n    headers: headers,\n    mode: 'cors'\n  };\n  const request = new Request(FESTIVAL_PERFORMANCES_BASE_URL, myInit);\n  console.log('Inainte de fetch pentru ' + FESTIVAL_PERFORMANCES_BASE_URL);\n  return fetch(request).then(status).then(json).then(data => {\n    console.log('Request succeeded with JSON response', data);\n    return data;\n  }).catch(error => {\n    console.log('Request failed', error);\n    return Promise.reject(error);\n  });\n}\n_c = GetAllPerformances;\nexport function DeletePerformance(id) {\n  console.log('Inainte de fetch delete.');\n  const myHeaders = new Headers();\n  myHeaders.append(\"Accept\", \"application/json\");\n  const antet = {\n    method: 'DELETE',\n    headers: myHeaders,\n    mode: 'cors'\n  };\n  const performanceDelUrl = FESTIVAL_PERFORMANCES_BASE_URL + '/' + id;\n  console.log('URL pentru delete: ' + performanceDelUrl);\n  return fetch(performanceDelUrl, antet).then(status).then(response => {\n    console.log('Delete status: ' + response.status);\n    return response.text();\n  }).catch(e => {\n    console.log('Error ' + e);\n    return Promise.reject(e);\n  });\n}\n_c2 = DeletePerformance;\nexport function CreatePerformance(performance) {\n  console.log('Inainte de fetch post: ' + JSON.stringify(performance));\n  const myHeaders = new Headers();\n  myHeaders.append(\"Accept\", \"application/json\");\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  const antet = {\n    method: 'POST',\n    headers: myHeaders,\n    mode: 'cors',\n    body: JSON.stringify(performance)\n  };\n  return fetch(FESTIVAL_PERFORMANCES_BASE_URL, antet).then(status).then(response => {\n    return response.text();\n  }).catch(error => {\n    console.log('error: ', error);\n    return Promise.reject(error);\n  });\n}\n_c3 = CreatePerformance;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"GetAllPerformances\");\n$RefreshReg$(_c2, \"DeletePerformance\");\n$RefreshReg$(_c3, \"CreatePerformance\");","map":{"version":3,"names":["FESTIVAL_PERFORMANCES_BASE_URL","status","response","console","log","Promise","resolve","reject","Error","statusText","json","GetAllPerformances","headers","Headers","append","myInit","method","mode","request","Request","fetch","then","data","catch","error","DeletePerformance","id","myHeaders","antet","performanceDelUrl","text","e","CreatePerformance","performance","JSON","stringify","body"],"sources":["C:/Users/USer/Desktop/Semestrul 4/MPP/Laboratoare/MPP/MusicFestivalMPP-Java/client_react/src/utils/rest-calls.js"],"sourcesContent":["import {FESTIVAL_PERFORMANCES_BASE_URL} from './consts';\r\n\r\nfunction status(response) {\r\n    console.log('Response status: ' + response.status);\r\n    if (response.status >= 200 && response.status < 300) {\r\n        return Promise.resolve(response)\r\n    } else {\r\n        return Promise.reject(new Error(response.statusText))\r\n    }\r\n}\r\n\r\nfunction json(response) {\r\n    return response.json()\r\n}\r\n\r\nexport function GetAllPerformances(){\r\n    const headers = new Headers();\r\n    headers.append('Accept', 'application/json');\r\n    const myInit = {\r\n        method: 'GET',\r\n        headers: headers,\r\n        mode: 'cors'\r\n    };\r\n    const request = new Request(FESTIVAL_PERFORMANCES_BASE_URL, myInit);\r\n    console.log('Inainte de fetch pentru ' + FESTIVAL_PERFORMANCES_BASE_URL)\r\n    return fetch(request)\r\n        .then(status)\r\n        .then(json)\r\n        .then(data=> {\r\n            console.log('Request succeeded with JSON response', data);\r\n            return data;\r\n        }).catch(error=>{\r\n            console.log('Request failed', error);\r\n            return Promise.reject(error);\r\n        });\r\n}\r\n\r\nexport function DeletePerformance(id){\r\n    console.log('Inainte de fetch delete.')\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Accept\", \"application/json\");\r\n    const antet = {\r\n        method: 'DELETE',\r\n        headers: myHeaders,\r\n        mode: 'cors'\r\n    };\r\n    const performanceDelUrl = FESTIVAL_PERFORMANCES_BASE_URL + '/' + id;\r\n    console.log('URL pentru delete: ' + performanceDelUrl)\r\n    return fetch(performanceDelUrl, antet)\r\n        .then(status)\r\n        .then(response=>{\r\n            console.log('Delete status: ' + response.status);\r\n            return response.text();\r\n        }).catch(e=>{\r\n            console.log('Error '+e);\r\n            return Promise.reject(e);\r\n        });\r\n\r\n}\r\n\r\nexport function CreatePerformance(performance){\r\n    console.log('Inainte de fetch post: ' + JSON.stringify(performance));\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Accept\", \"application/json\");\r\n    myHeaders.append(\"Content-Type\",\"application/json\");\r\n    const antet = {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        mode: 'cors',\r\n        body: JSON.stringify(performance)\r\n    };\r\n    return fetch(FESTIVAL_PERFORMANCES_BASE_URL, antet)\r\n        .then(status)\r\n        .then(response=>{\r\n            return response.text();\r\n        }).catch(error=>{\r\n            console.log('error: ', error);\r\n            return Promise.reject(error);\r\n        });\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}