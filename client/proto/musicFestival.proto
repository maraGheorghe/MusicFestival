syntax = "proto3";
import "google/protobuf/timestamp.proto";

message LoginRequest {
  optional string username = 1;
  optional string password = 2;
}

message LoginResponse {
  optional string username = 1;
  optional string password = 2;
  optional int64 id = 3;
  optional int32 type = 4;
  optional string error = 5;
}

message LogoutRequest {
  optional string username = 1;
  optional string password = 2;
}

message LogoutResponse {
  optional string username = 1;
  optional string password = 2;
  optional int64 id = 3;
}

message DateTimeMessage {
  optional int32 year = 1;
  optional int32 month = 2;
  optional int32 day = 3;
  optional int32 hour = 4;
  optional int32 minute = 5;
}

message PerformanceMessage {
  optional int64 id = 6;
  optional DateTimeMessage date = 1;
  optional string place = 2;
  optional int32 noOfAvailableSeats = 3;
  optional int32 noOfSoldSeats = 4;
  optional string artist = 5;
}

message GetPerformancesRequest {
}

message GetPerformancesResponse {
  repeated PerformanceMessage performances = 1;
}

message GetPerformancesByDateRequest {
  optional DateTimeMessage date = 1;
}

message GetPerformancesByDateResponse {
  repeated PerformanceMessage performances = 1;
}

message BuyTicketRequest {
  optional PerformanceMessage performance = 1;
  optional string owner = 2;
  optional int32 numberOfSeats = 3;
}

message BuyTicketResponse {
  optional int64 id = 4;
  optional int32 type = 1;
  optional string error = 2;
  optional BuyTicketRequest ticket = 3;
}

message TicketBoughtMessageFromService {
  optional int64 id = 1;
  optional BuyTicketRequest ticket = 2;
}

service MusicFestivalService {
  rpc login(LoginRequest) returns (LoginResponse) {}
  rpc logout(LogoutRequest) returns (LogoutResponse) {}
  rpc findAllPerformances(GetPerformancesRequest) returns (GetPerformancesResponse) {}
  rpc findAllPerformancesByDate(GetPerformancesByDateRequest) returns (GetPerformancesByDateResponse) {}
  rpc buyTicket(BuyTicketRequest) returns (BuyTicketResponse) {}
  rpc ticketBought(stream BuyTicketRequest) returns (stream TicketBoughtMessageFromService) {}
}